class Solution {
public:
    double myPow(double x, int n) {
    double res=1.0;
    long long nn=n;
    if(n<0)
     nn=-1*nn;
    while(nn>0){
        if(nn%2)//odd
        {
            res=res*x;
            nn=nn-1;
        }
        else
        {
            x=x*x;
            nn=nn/2;
        }
    } 
    if(n<0)
     res=(double)(1.0)/(double)res;
    return res;
    }
};




#include <bits/stdc++.h> 
int modularExponentiation(int x, int n, int m) {
	// Write your code here.
    long long res=1;
    while(n>0){
    if(n&1)//odd
    {
        res=(res*x)%m;
    }
    x=(1LL*x*x)%m;
      n=  n>>1;
    }
    return res;
    
}

class Solution {
public:
    int take=0;
    int solvemem(string text1, string text2,int i,int j,vector<vector<int>>&dp)
    {
        if(i==text1.length()||j==text2.length())
         return 0;
        
         if(dp[i][j]!=-1)
          return dp[i][j];

        if(text1[i]==text2[j])
        {
           return dp[i][j]=1+solvemem(text1,text2,i+1,j+1,dp);
        }  
        
       
         return dp[i][j]=max(solvemem(text1,text2,i+1,j,dp),solverec(text1,text2,i,j+1,dp));
    
    }

    int solvetab(string text1,string text2)
    {
       int n=text1.length();
       int m=text2.length();
       vector<vector<int>>dp(n+1,vector<int>(m+1, 0));
       
        for(int i=n-1;i>=0;i--)
		    {
		        for(int j=m-1;j>=0;j--)
		        {
		            int movea,moveb;
		            
		            movea=dp[i+1][j];
		            moveb=dp[i][j+1];
		            
		            int take=0;
		            if(text1[i]==text2[j])
		            {
		               take=1+dp[i+1][j+1]; 
		            }
		            
		            dp[i][j]=max(movea,max(moveb,take));
		        }
		    }

            return dp[0][0];
      
    }
    int longestCommonSubsequence(string text1, string text2) {
       
    //    int n=text1.length();
    //    int m=text2.length();
    //    vector<vector<int>>dp(n,vector<int>(m,-1));
    //    return solvemem(text1,text2,0,0,dp);    

     return solvetab(text1,text2);

    }
};

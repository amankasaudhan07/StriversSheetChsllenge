class Solution {
public: 
    int solve(int i,int j,int m,int n)
    {
        if(i==m&&j==n)
         return 1;
        
        if(i>m||j>n)
         return 0;

        int count=0;
        count+=solve(i+1,j,m,n);
        count+=solve(i,j+1,m,n); 
        
        return count;
            
    }
    int solvemem(int i,int j,int m,int n, vector<vector<int>>&dp)
    {
        if(i==m&&j==n)
         return 1;
        
        if(i>m||j>n)
         return 0;

        if(dp[i][j]!=-1)
          return dp[i][j];

        int count=0;
        count+=solvemem(i+1,j,m,n,dp);
        count+=solvemem(i,j+1,m,n,dp); 
        
        return dp[i][j]=count;
            
    }
   
    
   int solveoptimal(int m,int n)
   {
       int N=m+n-2;
       int r=m-1;
        double res=1;
       for(int i=1;i<=r;i++)
       {
          res=res*(N-r+i)/i;
       }

       return (int)res;
   }

    int uniquePaths(int m, int n) {
        // vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
        // return solvemem(1,1,m,n,dp);
        return solveoptimal(m,n);
    }
};
